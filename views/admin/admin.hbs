<script>
'use strict';
(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['jquery'], factory);
  } else {
    // Browser globals
    factory(jQuery);
  }
}(function ($) {
  var IS_TOUCH_DEVICE = ('ontouchstart' in document.documentElement);
  /**
   * mouse move threshold (in px) until drag action starts
   * @type {Number}
   */
  var DRAG_THRESHOLD = 5;
  /**
   * to generate event namespace
   * @type {Number}
   */
  var counter = 0;

  /**
   * Javascript events for touch device/desktop
   * @return {Object}
   */
  var dragEvents = (function () {
    if (IS_TOUCH_DEVICE) {
      return {
        START: 'touchstart',
        MOVE: 'touchmove',
        END: 'touchend'
      };
    }
    else {
      return {
        START: 'mousedown',
        MOVE: 'mousemove',
        END: 'mouseup'
      };
    }
  }());

  $.fn.arrangeable = function(options) {
    var dragging = false;
    var $clone;
    var dragElement;
    var originalClientX, originalClientY; // client(X|Y) position before drag starts
    var $elements;                        // list of elements to shift between
    var touchDown = false;
    var leftOffset, topOffset;
    var eventNamespace;

    if (typeof options === "string") {
      // check if want to destroy drag-arrange
      if (options === 'destroy') {
        if (this.eq(0).data('drag-arrange-destroy')) {
          this.eq(0).data('drag-arrange-destroy')();
        }

        return this;
      }
    }

    options = $.extend({
      "dragEndEvent": "drag.end.arrangeable"
    }, options);

    var dragEndEvent = options["dragEndEvent"];

    $elements = this;
    eventNamespace = getEventNamespace();

    this.each(function() {
      // bindings to trigger drag on element
      var dragSelector = options.dragSelector;
      var self = this;
      var $this = $(this);

      if (dragSelector) {
        $this.on(dragEvents.START + eventNamespace, dragSelector, dragStartHandler);
      } else {
        $this.on(dragEvents.START + eventNamespace, dragStartHandler);
      }

      function dragStartHandler(e) {
        // a mouse down/touchstart event, but still drag doesn't start till threshold reaches
        // stopPropagation is compulsory, otherwise touchmove fires only once (android < 4 issue)
        e.stopPropagation();
        touchDown = true;
        originalClientX = e.clientX || e.originalEvent.touches[0].clientX;
        originalClientY = e.clientY || e.originalEvent.touches[0].clientY;
        dragElement = self;
      }
    });

    // bind mouse-move/touchmove on document
    // (as it is not compulsory that event will trigger on dragging element)
    $(document).on(dragEvents.MOVE + eventNamespace, dragMoveHandler)
      .on(dragEvents.END + eventNamespace, dragEndHandler);

    function dragMoveHandler(e) {
      if (!touchDown) { return; }

      var $dragElement = $(dragElement);
      var dragDistanceX = (e.clientX  || e.originalEvent.touches[0].clientX) - originalClientX;
      var dragDistanceY = (e.clientY || e.originalEvent.touches[0].clientY) - originalClientY;

      if (dragging) {
        e.stopPropagation();

        $clone.css({
          left: leftOffset + dragDistanceX,
          top: topOffset + dragDistanceY
        });

        shiftHoveredElement($clone, $dragElement, $elements);

      // check for drag threshold (drag has not started yet)
      } else if (Math.abs(dragDistanceX) > DRAG_THRESHOLD ||
          Math.abs(dragDistanceY) > DRAG_THRESHOLD) {
        $clone = clone($dragElement);

        // initialize left offset and top offset
        // will be used in successive calls of this function
        leftOffset = dragElement.offsetLeft - parseInt($dragElement.css('margin-left')) - 
          parseInt($dragElement.css('padding-left'));
        topOffset = dragElement.offsetTop - parseInt($dragElement.css('margin-top')) - 
          parseInt($dragElement.css('padding-top'));

        // put cloned element just above the dragged element
        // and move it instead of original element
        $clone.css({
          left: leftOffset,
          top: topOffset
        });
        $dragElement.parent().append($clone);

        // hide original dragged element
        $dragElement.css('visibility', 'hidden');

        dragging = true;
      }
    }

    function dragEndHandler(e) {
      if (dragging) {
        // remove the cloned dragged element and
        // show original element back
        e.stopPropagation();
        dragging = false;
        $clone.remove();
        dragElement.style.visibility = 'visible';

        $(dragElement).parent().trigger(dragEndEvent, [$(dragElement)]);
      }

      touchDown = false;
    }

    function destroy() {
      $elements.each(function() {
        // bindings to trigger drag on element
        var dragSelector = options.dragSelector;
        var $this = $(this);

        if (dragSelector) {
          $this.off(dragEvents.START + eventNamespace, dragSelector);
        } else {
          $this.off(dragEvents.START + eventNamespace);
        }
      });

      $(document).off(dragEvents.MOVE + eventNamespace)
        .off(dragEvents.END + eventNamespace);

      // remove data
      $elements.eq(0).data('drag-arrange-destroy', null);

      // clear variables
      $elements = null;
      dragMoveHandler = null;
      dragEndHandler = null;
    }

    this.eq(0).data('drag-arrange-destroy', destroy);
  };

  function clone($element) {
    var $clone = $element.clone();

    $clone.css({
      position: 'absolute',
      width: $element.width(),
      height: $element.height(),
      'z-index': 100000 // very high value to prevent it to hide below other element(s)
    });

    return $clone;
  }

  /**
   * find the element on which the dragged element is hovering
   * @return {DOM Object} hovered element
   */
  function getHoveredElement($clone, $dragElement, $movableElements) {
    var cloneOffset = $clone.offset();
    var cloneWidth = $clone.width();
    var cloneHeight = $clone.height();
    var cloneLeftPosition = cloneOffset.left;
    var cloneRightPosition = cloneOffset.left + cloneWidth;
    var cloneTopPosition = cloneOffset.top;
    var cloneBottomPosition = cloneOffset.top + cloneHeight;
    var $currentElement;
    var horizontalMidPosition, verticalMidPosition;
    var offset, overlappingX, overlappingY, inRange;

    for (var i = 0; i < $movableElements.length; i++) {
      $currentElement = $movableElements.eq(i);

      if ($currentElement[0] === $dragElement[0]) { continue; }

      offset = $currentElement.offset();

      // current element width and draggable element(clone) width or height can be different
      horizontalMidPosition = offset.left + 0.5 * $currentElement.width();
      verticalMidPosition = offset.top + 0.5 * $currentElement.height();

      // check if this element position is overlapping with dragged element
      overlappingX = (horizontalMidPosition < cloneRightPosition) &&
        (horizontalMidPosition > cloneLeftPosition);

      overlappingY = (verticalMidPosition < cloneBottomPosition) &&
        (verticalMidPosition > cloneTopPosition);

      inRange = overlappingX && overlappingY;

      if (inRange) {
        return $currentElement[0];
      }
    }
  }

  function shiftHoveredElement($clone, $dragElement, $movableElements) {
    var hoveredElement = getHoveredElement($clone, $dragElement, $movableElements);

    if (hoveredElement !== $dragElement[0]) {
      // shift all other elements to make space for the dragged element
      var hoveredElementIndex = $movableElements.index(hoveredElement);
      var dragElementIndex = $movableElements.index($dragElement);
      if (hoveredElementIndex < dragElementIndex) {
        $(hoveredElement).before($dragElement);
      } else {
        $(hoveredElement).after($dragElement);
      }

      // since elements order have changed, need to change order in jQuery Object too
      shiftElementPosition($movableElements, dragElementIndex, hoveredElementIndex);
    }
  }

  function shiftElementPosition(arr, fromIndex, toIndex) {
    var temp = arr.splice(fromIndex, 1)[0];
    return arr.splice(toIndex, 0, temp);
  }

  function getEventNamespace() {
    counter += 1;

    return '.drag-arrange-' + counter;
  }

}));

var Collections = Object.create(null);
var Products = Object.create(null);

//Start Here
document.addEventListener("DOMContentLoaded", function(event) { 
  fetch("/api/allCollections", (data) => { 
    displayFirstTab();
    $('#nav-collections-tab').on('click', function (e) { displayFirstTab() });
    $('#nav-products-tab').on('click', function (e) { displaySecondTab() });
    $('#nav-product-tab').on('click', function (e) { displayThirdTab() });
    document.getElementById("btnSearch").addEventListener("click", function(event) { SearchItem($('#search-input').val()) });
    document.getElementById("search-input").addEventListener("keypress", function(event) {
      if (event.key === "Enter") {
        event.preventDefault();
        SearchItem($('#search-input').val());
      }
    });

    Collections = JSON.parse(data);
    Collections.map(function(e) { $("#collectionsSel").append('<option value="' + e.collectionId + '">' + e.collectionName + "</option>")});
    Collections.forEach(c => {$("#collectionContainer").append(`<span class="draggable-element d-1" data-collectionId="${c.collectionId}" style="position:relative;background-image: url(/images/collections/${c.image});background-size:contain;background-repeat:no-repeat;background-position: center;height:180px;"><button data-collectionId="${c.collectionId}" data-bs-toggle="offcanvas" data-bs-target="#offCanvas" type="button" class="btn btn-light" style="position:absolute;bottom:0;left:0" onclick="collectionEdit(this)">Edit</button></span>`)});

    $('.draggable-element').arrangeable();
    $('#collectionContainer').on("drag.end.arrangeable", function(item) { 
        $.each(document.querySelectorAll('#collectionContainer span'), function( index, value ){                
            var collectionId = parseInt(value.getAttribute('data-collectionId'));
            Collections.find(item => item.collectionId === collectionId).sortIndex = index + 1;
        });
        put("/api/updateCollections", Collections, (result) => { console.log('updated') });
    });

  fetch("/api/allProducts", (data) => { Products = JSON.parse(data) });
  });
  document.getElementById("collectionsSel").addEventListener("change", colSelChanged);
});

function displayFirstTab() {
  var firstTab = document.getElementById("nav-collections");
  var firstTabDescendents = firstTab.getElementsByTagName('*');
  for (var i = 0; i < firstTabDescendents.length; i++) { firstTabDescendents[i].style.visibility = 'visible';}
  
  var secondTab = document.getElementById("nav-products");
  var secondTabDescendents = secondTab.getElementsByTagName('*');
  for (var i = 0; i < secondTabDescendents.length; i++) { secondTabDescendents[i].style.visibility = 'hidden';}
    
  var thirdTab = document.getElementById("nav-product");
  var thirdTabDescendents = thirdTab.getElementsByTagName('*');
  for (var i = 0; i < thirdTabDescendents.length; i++) { thirdTabDescendents[i].style.visibility = 'hidden';}
}

function displaySecondTab() {
  var firstTab = document.getElementById("nav-collections");
  var firstTabDescendents = firstTab.getElementsByTagName('*');
  for (var i = 0; i < firstTabDescendents.length; i++) { firstTabDescendents[i].style.visibility = 'hidden';}
  
  var secondTab = document.getElementById("nav-products");
  var secondTabDescendents = secondTab.getElementsByTagName('*');
  for (var i = 0; i < secondTabDescendents.length; i++) { secondTabDescendents[i].style.visibility = 'visible';}
    
  var thirdTab = document.getElementById("nav-product");
  var thirdTabDescendents = thirdTab.getElementsByTagName('*');
  for (var i = 0; i < thirdTabDescendents.length; i++) { thirdTabDescendents[i].style.visibility = 'hidden';}
}

function displayThirdTab() {
  var firstTab = document.getElementById("nav-collections");
  var firstTabDescendents = firstTab.getElementsByTagName('*');
  for (var i = 0; i < firstTabDescendents.length; i++) { firstTabDescendents[i].style.visibility = 'hidden';}
  
  var secondTab = document.getElementById("nav-products");
  var secondTabDescendents = secondTab.getElementsByTagName('*');
  for (var i = 0; i < secondTabDescendents.length; i++) { secondTabDescendents[i].style.visibility = 'hidden';}
    
  var thirdTab = document.getElementById("nav-product");
  var thirdTabDescendents = thirdTab.getElementsByTagName('*');
  for (var i = 0; i < thirdTabDescendents.length; i++) { thirdTabDescendents[i].style.visibility = 'visible';}
}

function collectionEdit(e) {
  let colId = parseInt(e.getAttribute('data-collectionId'));
  let sc = Collections.find(item => item.collectionId === colId);
  document.getElementById('ocColId').value = colId;  
  document.getElementById('ocActive').checked = sc.active;  
  document.getElementById('ocTopHeader').innerText = sc.collectionName;
  document.getElementById('ocCollectionName').value = sc.collectionName;
  document.getElementById('ocCollectionDesc').value = sc.description;
  document.getElementById('ocSortOrder').innerText = sc.sortIndex;
  document.getElementById("colHero").src = "/images/collections/" + sc.image;
}

function colSelChanged(e) {
  $('#imageContainer').empty(); 
  var colId = parseInt(this.value);
  var products = Products.filter((item) => { return item.collectionId === colId }).sort(function(a, b){ return a.sortIndex - b.sortIndex; });
   products.forEach(p => {
      $("#imageContainer").append(renderProductItemPreview(p));
  });
  $('.draggable-element').arrangeable();
  $('#imageContainer').on("drag.end.arrangeable", function(item) { 
    var updateProducts = [];
    $.each(document.querySelectorAll('#imageContainer span'), function( index, value ){                
        var productId = parseInt(value.getAttribute('data-productId'));
        var filtered = Products.find(item => item.productId === productId);
        filtered.sortIndex = index + 1;  
        updateProducts.push(filtered);
    });
    put("/updateProducts", updateProducts, (result) => { if(result === "SUCCESS"){/*do stuff*/} });
  });
}

function productEdit(e) {
  let productId = parseInt(e.getAttribute('data-productId'));
  let sp = Products.find(item => item.productId === productId);
  //document.getElementById('offcanvasRightHeader').innerHTML = sp.productName;
  document.getElementById('ocrSku').value = sp.productId;
  document.getElementById('ocrActive').checked = sp.active;
  document.getElementById('ocrIsSold').checked = sp.isSold;
  document.getElementById('ocrSortOrder').innerText = sp.sortIndex;
  document.getElementById('ocrProductName').value = sp.productName;
  document.getElementById('ocrSize').value = sp.size;
  document.getElementById('ocrPrice').value = sp.price;
  document.getElementById('ocrMeasurements').value = sp.measurements;
  document.getElementById('ocrPostal').value = sp.ausPostParcel;
  //document.getElementById('productHero')?? = sp.productThumbs[0];
}

function Redirect() {
  var productId = document.getElementById('ocrSku').value;
  location.href='/productEditor/' + productId;
}

function renderProductItemPreview(p) {
  return `<span class="draggable-element d-1" data-productId="${p.productId}" style="position:relative;background-image:url('${imagePath + p.productThumbs[0]}');background-size:contain;background-repeat:no-repeat;background-position:center;height:180px;"><button data-productId="${p.productId}" data-bs-toggle="offcanvas" data-bs-target="#offcanvasPEditor" type="button" class="btn btn-light" style="position:absolute;bottom:0;left:0" onclick="productEdit(this)">Edit</button></span>`;
}

function SaveCollection(e) {
  var colId = parseInt(document.getElementById('ocColId').value);
  let sc = Collections.find(item => item.collectionId === colId);
  sc.active = document.getElementById('ocActive').checked;
  sc.collectionName = document.getElementById('ocCollectionName').value;
  sc.description = document.getElementById('ocCollectionDesc').value;
  put("/api/updateCollections", Collections, (result) => { 
    if (result == "\"SUCCESS\"") { 
      sendToastMessage("Collection updated successfully.");
    } else {
      console.error(result);
    }
    bootstrap.Offcanvas.getInstance(document.getElementById("offCanvas")).hide();
  });
}

function SaveProduct() {
  let productId = parseInt(document.getElementById("ocrSku").value);  
  let p = Products.find(item => item.productId === productId);
  p.productName = document.getElementById("ocrProductName").value;;
  p.productId = productId;
  p.active = document.getElementById("ocrActive").checked;
  p.isSold = document.getElementById("ocrIsSold").checked;
  p.size = document.getElementById("ocrSize").value;;
  p.price = document.getElementById("ocrPrice").value;;
  p.measurements = document.getElementById("ocrMeasurements").value;;
  p.ausPostParcel = document.getElementById("ocrPostal").value;;

  put("/updateProduct/", p, (result) => {        
    if (result == "\"SUCCESS\"") { 
      sendToastMessage("Product updated successfully.");
    } else {
      console.error(result);
    }
    bootstrap.Offcanvas.getInstance(document.getElementById("offcanvasPEditor")).hide();
  });
}

function SearchItem(text) {
  $('#searchResults').empty();
  fetch("/api/search/" + text, (data) => {
    JSON.parse(data).forEach(p => {
      $("#searchResults").append(renderProductItemPreview(p));
    });
  });
}
</script>
<style>
    #collectionContainer {
        text-align: center;
    }
    .draggable-element {
        display: inline-block;
        width: 120px;
        height: 120px;
        background-color:black;
        border: 1px solid black;
        line-height: 120px;
        text-align: center;
        margin: 10px;
        color: rgb(51, 51, 51);
        font-size: 30px;
        cursor: move;
    }
    #nav-tab button {
      color: white;
    }
     #nav-tab button.active {
      color: black;
    }
</style>

{{!-- Collections Offcanvas View --}}
<div class="offcanvas offcanvas-start text-dark" tabindex="-1" id="offCanvas" aria-labelledby="offCanvasLabel">
  <div class="offcanvas-header">
    <h5 class="offcanvas-title" id="ocTopHeader"></h5>
    <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
  </div>
  <div class="offcanvas-body">
    <div class="mb-3">
      <span>Sort Order: <span id="ocSortOrder"></span></span>
    </div>
    <div class="mb-3">
      <label for="ocActive" class="form-label">Active   </label>
      <input class="form-check-input" type="checkbox" name="ocActive" id="ocActive">
    </div>
    <div class="mb-3">
      <label for="ocCollectionName" class="form-label">Name</label>
      <input type="text" class="form-control form-control-lg" id="ocCollectionName" placeholder="Collection Name">
      <input type="hidden" id="ocColId" />
    </div>
    <div class="mb-3">
      <label for="ocCollectionDesc" class="form-label">Description</label>
      <textarea class="form-control form-control-lg" id="ocCollectionDesc" rows="3"></textarea>
    </div>
    <div class="mb-5">
      <img id="colHero" class="rounded mx-auto d-block" style="max-height:400px"  />
    </div>
    <div class="mb-3">
      <input class="form-control form-control-lg" id="formFileLg" type="file">
    </div>
    <div class="mb-3">
      <button type="submit" class="btn btn-primary btn-lg" onclick="SaveCollection(this)">Save</button>
    </div>
  </div>
</div>

{{!-- Products Offcanvas View --}}
<div class="offcanvas offcanvas-end text-dark" tabindex="-1" id="offcanvasPEditor" aria-labelledby="offcanvasRightLabel">
  <div class="offcanvas-header">
    <div class="mb-3">
      <h5>Quick Edit</h5>
    </div>
    <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
  </div>
  <div class="offcanvas-body">
     <div class="mb-3">
      <label for="ocrProductName" class="form-label">Name</label>
      <input type="text" class="form-control form-control-lg" id="ocrProductName" placeholder="Product Name">
    </div>
    <div class="mb-3">
      <span>Sort Order: <span id="ocrSortOrder"></span></span>
    </div>
    <div class="mb-3">
      <label for="ocrActive" class="form-label">Active</label>
      <input class="form-check-input" type="checkbox" name="ocrActive" id="ocrActive">
      <label for="ocrIsSold" class="form-label ms-5">Is Sold</label>
      <input class="form-check-input" type="checkbox" name="ocrIsSold" id="ocrIsSold">
    </div>
    <div class="row">
      <div class="col-5">
        <div class="mb-3">
          <label for="ocrSku" class="form-label">SKU</label>
          <input type="text" class="form-control form-control-lg" id="ocrSku" placeholder="SKU Number">
        </div>
        <div class="mb-3">
          <label for="ocrPrice" class="form-label">Price</label>
          <input type="text" class="form-control form-control-lg" id="ocrPrice" placeholder="Price">
        </div>
        <div class="mb-3">
          <label for="ocrSize" class="form-label">Size</label>
          <input type="text" class="form-control form-control-lg" id="ocrSize" placeholder="Size">
        </div>
      </div>
      <div class="col-7">
        <div class="mb-5">
          <img id="productHero" class="rounded mx-auto d-block" style="max-height:400px"  />
        </div>
      </div>
    </div>
    <div class="mb-3">
      <label for="ocrMeasurements" class="form-label">Measurements</label>
      <input type="text" class="form-control form-control-lg" id="ocrMeasurements" placeholder="Measurements">
    </div>
    <div class="mb-3">
      <label for="ocrPostal" class="form-label">Parcel Size</label>
      <select id="ocrPostal" name="parcel" class="form-select form-select-lg" >
          <option value="XS">XS</option>
          <option value="S">S</option>
          <option value="M">M</option>
          <option value="L">L</option>
          <option value="XL">XL</option>
      </select>
    </div>
    <button type="submit" class="btn btn-dark btn-lg" onclick="Redirect()">Full Edit</button>
    <button type="submit" class="btn btn-dark btn-lg" onclick="SaveProduct()">Save</button>
  </div>
</div>


{{!-- CONTENT PANE --}}
<h2 style="margin-top:150px" class="mb-4 ms-2">Baja La Admin</h2>
<nav>
  <div class="nav nav-tabs m-1" id="nav-tab" role="tablist">
    <button class="nav-link active" id="nav-collections-tab" data-bs-toggle="tab" data-bs-target="#nav-collections" type="button" role="tab" aria-controls="nav-collections" aria-selected="true">Collections</button>
    <button class="nav-link" id="nav-products-tab" data-bs-toggle="tab" data-bs-target="#nav-products" type="button" role="tab" aria-controls="nav-products" aria-selected="false">Products</button>
    <button class="nav-link" id="nav-product-tab" data-bs-toggle="tab" data-bs-target="#nav-product" type="button" role="tab" aria-controls="nav-product" aria-selected="false">Search</button>
  </div>
</nav>
<div class="tab-content" id="nav-tabContent">
  <div class="tab-pane fade show active" id="nav-collections" role="tabpanel" aria-labelledby="nav-collections-tab">
    <h4 class="m-3">Drag the collection to the order you would like them to be displayed..</p>
    <div id="collectionContainer"></div> 
  </div>

  <div class="m-4 tab-pane fade show active" id="nav-products" role="tabpanel" aria-labelledby="nav-products-tab">
    <span>Choose a collection..</span>
    <select id="collectionsSel" name="collectionsSel" class="form-select form-select-lg w-auto">
      <option disabled selected>Select a Collection..</option>
    </select>
    <div id="imageContainer"></div>
  </div>

  <div class="m-4 tab-pane fade show active" id="nav-product" role="tabpanel" aria-labelledby="nav-product-tab">
    <span>Search for an item (Name, Description or SKU)</span>
    <div class="input-group">
      <div class="form-outline">
        <input id="search-input" type="search" id="form1" class="form-control form-control-lg" placeholder="Find Stock" />
      </div>
      <button type="button" class="btn btn-light ps-1" id="btnSearch">
        <i class="fas fa-search"></i>
      </button>
    </div>
    <div id="searchResults"></div>
  </div>
</div>